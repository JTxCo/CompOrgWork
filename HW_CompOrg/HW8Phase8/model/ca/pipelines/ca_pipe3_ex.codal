/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe3_ex.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "ca_defines.hcodal"
#include "debug.hcodal"

// -------------------------------------------------------------------------------------------------
// Execute Stage
// -------------------------------------------------------------------------------------------------
event ex : pipeline(pipe.EXMEM)
{
    use alu_operate;
    use ex_output;
    use memory_operation;
    semantics
    {
        uint32 encoded_data;
        //new code added in Phase 6:
        // If ((r_memwb_rd == s_id_rs1) && (r_memwb_rd !=0) && (r_mewb_regwrite ==true)){
        if (r_memwb_rd == s_id_src1){
            s_ex_fwd1 = s_id_src1;
        }
        if ((r_memwb_rd == s_id_src2) && (r_memwb_rd !=0) && (r_memwb_regwrite ==true)){
            s_ex_fwd2 = s_id_src2;
        }

        if (s_ex_fwd1 == s_id_src1) {
            s_ex_fwd1_val = s_id_rf_src1;
        } else {
            s_ex_fwd1_val = r_memwb_rd;
        }

        if (s_ex_fwd2 == s_id_src2) {
            s_ex_fwd2_val = s_id_rf_src2;
        } else {
            s_ex_fwd2_val = r_memwb_rd;
        }


        // Develop a multiplexer for the ALU src1 operand using a switch statement using the src1_sl
        // control signal provided by the IDEX pipeline register generated by the Instruction decoder
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to src1_sl to build the complete name of input value for this switch statement?
        //
        // In Assignment 5, there is only one input which is the src1 register file, rf, value and
        // this input is from the IDEX pipeline register
        switch (r_idex_src1_sel) {
            case ALU_SRC1_SEL_RF:
                s_src1_operand = r_idex_rf_src1;
                break; 
            default:
                s_src1_operand =0;
                break;
        }    



        // Develop a multiplexer for the ALU src1 operand using a switch statement using the src1_sl
        // control signal provided by the IDEX pipeline register generated by the Instruction decoder
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to src1_sl to build the complete name of input value for this switch statement?
        //
        // In Assignment 5, there are two inputs to the source 2 operand mux, the src2 register, rf, value
        // and the immediate value.  Both of these inputs are from the IDEX pipeline register
        switch (r_idex_src2_sel) {
            case ALU_SRC2_SEL_RF:
                s_src2_operand = r_idex_rf_src2;
                break;
            case ALU_SRC2_SEL_IMM:
                s_src2_operand = r_idex_src2_imm;
                break;
            default:
                s_src2_operand = 0;
                break;
        }


        // HALT instruction detection used for simulation purposes until the load/store instructions
        // have been implemented
        if (r_idex_halt == true)
        {
            codasip_info(INFO_GENERAL, "Halt instruction indicated");
//            codasip_store_exit_code(rf_xpr[GPR_RETVAL] & 0xFF);
            #pragma simulator
            {
                codasip_halt();
            }

        }

        // If not a halt operation, call ALU routine
        alu_operate();

        memory_operation();




        // Update the pipeline registers between the Execute (EX) and MEMORY (MEM) stages
        ex_output();
    };
};

event alu_operate : pipeline(pipe.EXMEM)
{
    semantics
    {
        // A switch statement will be used to determine and evaluate the ALU operation using
        // the aluop code provided by the IDEX pipeline register whose value is determined
        // by the instruction decoder.
        //
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to aluop to build the complete name of input from IDEX pipeline register for this switch 
        // statement?
        //
        // The value to assign in the case statements was added to ca_resources.codal earlier in
        // assignment 5
        switch (r_idex_aluop) {
            case ALU_NOP:
                s_ex_alu_result = 0;
                break;
            case ALU_ADD:
                s_ex_alu_result = s_src1_operand + s_src2_operand;
                break;
            case ALU_ADDI:
                s_ex_alu_result = s_src1_operand + s_src2_operand;
                break;
            case ALU_SLTI:
                s_ex_alu_result =  ( s_src1_operand < s_src2_operand) ? true : false;
                break;
            case ALU_SLTIU:
                s_ex_alu_result =  ((uint32) s_src1_operand < (uint32)s_src2_operand) ? true : false;
                break;
            case ALU_XORI:
                s_ex_alu_result = s_src1_operand ^ s_src2_operand;
                break;
            case ALU_ORI:
                s_ex_alu_result = s_src1_operand | s_src2_operand;
                break;
            case ALU_ANDI:
                s_ex_alu_result = s_src1_operand & s_src2_operand;
                break;
            case ALU_SUB:
                s_ex_alu_result = s_src1_operand - s_src2_operand;
                break;
            case ALU_SLL:
                s_ex_alu_result =(uint32)s_src1_operand << (uint5)s_src2_operand;
                break;
            case ALU_SLT:
                s_ex_alu_result =  ( s_src1_operand < s_src2_operand) ? true : false;
                break;
            case ALU_XOR:
                s_ex_alu_result = s_src1_operand ^ s_src2_operand;
                break;
            case ALU_SRL:
                 s_ex_alu_result = (uint32)s_src1_operand >> (uint5)s_src2_operand;
                break;
            case ALU_SRA:
                s_ex_alu_result = (int32)s_src1_operand >> (uint5)s_src2_operand;
                break;
            case ALU_OR:
                 s_ex_alu_result = s_src1_operand | s_src2_operand;
                break;
            case ALU_AND:
                s_ex_alu_result = s_src1_operand & s_src2_operand;
                break;
            case ALU_SLLI:
                s_ex_alu_result = s_src1_operand << (uint5)s_src2_operand;
                break;
            case ALU_SRLI:
                s_ex_alu_result = s_src1_operand >> (uint5)s_src2_operand;
                break;
            case ALU_SRAI:
                s_ex_alu_result = s_src1_operand >> (uint5)s_src2_operand;
                break;
            default:
                s_ex_alu_result = 0;
                break;
        }




    };
};


event ex_output : pipeline(pipe.EXMEM)
{
    semantics
    {
        // Store the ALU result to the EXMEM pipeline register
        // Use the pipeline register that you created earlier in Assignment 5 to pass the output
        // signal from the ALU switch statement from the alu_operate event


        // Passing control signals to the next stage, MEM, through the EXMEM pipeline register.  These
        // instruction decoder signals are being passed from the IDEX pipeline to the EXMEM pipeline.
        //
        // Assign the proper IDEX pipeline register to the following EXMEM pipeline registers.
        r_exmem_rd             = r_idex_rd;
        r_exmem_regwrite       = r_idex_regwrite;

        // Passing Decoder control-signals to the EX stage
        r_exmem_branch_inst = r_idex_branch_inst;
        r_exmem_jump_inst = r_idex_jump_inst;
        r_exmem_mem_ops = r_idex_mem_ops;
        r_exmem_memread = r_idex_memread;
        r_exmem_encoded_data = s_ex_encoded_data;
    };
};

event memory_operation : pipeline(pipe.EXMEM){
    semantics{
        uint1 op_rw;
        uint2 op_type;
        
        if (r_idex_mem_ops == MEM_LB || r_idex_mem_ops == MEM_LBU) {
            s_ex_mem_size = CP_AHB_SIZE_8; // Load byte
        } else if (r_idex_mem_ops == MEM_LH || r_idex_mem_ops == MEM_LHU) {
            s_ex_mem_size = CP_AHB_SIZE_16; // Load halfword
        } else {
            s_ex_mem_size = CP_AHB_SIZE_32; // Load word or store operation
        }

        // Determine the type of memory operation based on r_idex_mem_ops and r_idex_memread
        if (r_idex_memread) {
            op_rw = CP_AHB_READ; // Load operation
            op_type = CP_AHB_NONSEQ;
        } else if (r_idex_mem_ops == MEM_SB || r_idex_mem_ops == MEM_SH || r_idex_mem_ops == MEM_SW) {
            op_rw = CP_AHB_WRITE; // Store operation
            op_type = CP_AHB_NONSEQ;
        } else {
            op_rw = DONT_CARE; // Idle operation
            op_type = CP_AHB_IDLE;
        }
        ldst.transport(CP_PHS_ADDRESS, op_type, op_rw, s_ex_alu_result, s_ex_mem_size);
        s_ex_encoded_data =  ldst.encode_data(s_ex_fwd2_val, s_ex_alu_result, s_ex_mem_size);
    };

};


